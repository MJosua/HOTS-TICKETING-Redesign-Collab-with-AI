
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AppLayout } from '@/components/layout/AppLayout';
import { 
  Settings, 
  FileText, 
  Users, 
  Workflow, 
  Code, 
  TestTube, 
  Copy, 
  Download,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';
import { FormConfig, FormField, FormSection, RowGroup } from '@/types/formTypes';
import { DynamicForm } from '@/components/forms/DynamicForm';

const AdminGuide = () => {
  const [configBuilder, setConfigBuilder] = useState({
    title: 'Sample Service Form',
    description: 'This is a sample form generated by the admin guide',
    category: 'IT Support',
    fields: [] as FormField[],
    sections: [] as FormSection[],
    rowGroups: [] as RowGroup[]
  });

  const [generatedJson, setGeneratedJson] = useState('');
  const [testMode, setTestMode] = useState(false);

  const generateSampleConfig = () => {
    const sampleConfig: FormConfig = {
      title: configBuilder.title,
      description: configBuilder.description,
      category: configBuilder.category,
      url: '/sample-form',
      apiEndpoint: '/api/sample-form',
      fields: [
        {
          label: 'Full Name',
          name: 'full_name',
          type: 'text',
          required: true,
          placeholder: 'Enter your full name',
          columnSpan: 2
        },
        {
          label: 'Department',
          name: 'department',
          type: 'select',
          required: true,
          options: ['IT', 'HR', 'Finance', 'Marketing'],
          columnSpan: 1
        },
        {
          label: 'Priority Level',
          name: 'priority',
          type: 'radio',
          required: true,
          options: ['Low', 'Medium', 'High', 'Urgent'],
          columnSpan: 3
        },
        {
          label: 'Description',
          name: 'description',
          type: 'textarea',
          required: true,
          placeholder: 'Describe your request in detail',
          columnSpan: 3
        }
      ],
      sections: [
        {
          title: 'Additional Information',
          description: 'Optional fields for more details',
          fields: [
            {
              label: 'Budget Required',
              name: 'budget_required',
              type: 'toggle',
              required: false,
              columnSpan: 1
            },
            {
              label: 'Expected Completion Date',
              name: 'completion_date',
              type: 'date',
              required: false,
              columnSpan: 2
            },
            {
              label: 'Attach Files',
              name: 'attachments',
              type: 'file',
              required: false,
              multiple: true,
              accept: ['pdf', 'doc', 'docx', 'jpg', 'png'],
              maxSizeMB: 10,
              columnSpan: 3
            }
          ]
        }
      ],
      rowGroups: [
        {
          title: 'Equipment List',
          isStructuredInput: true,
          maxRows: 10,
          rowGroup: [],
          structure: {
            firstColumn: {
              label: 'Equipment Name',
              placeholder: 'Enter equipment name',
              type: 'text'
            },
            secondColumn: {
              label: 'Quantity',
              placeholder: 'Enter quantity',
              type: 'number'
            },
            thirdColumn: {
              label: 'Specifications',
              placeholder: 'Enter specifications',
              type: 'text'
            },
            combinedMapping: 'none'
          }
        }
      ]
    };

    const json = JSON.stringify(sampleConfig, null, 2);
    setGeneratedJson(json);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedJson);
  };

  const downloadJson = () => {
    const blob = new Blob([generatedJson], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'form-config.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const testConfig = () => {
    try {
      const config = JSON.parse(generatedJson);
      setTestMode(true);
    } catch (error) {
      alert('Invalid JSON configuration');
    }
  };

  const guideCategories = [
    {
      title: "System Administration",
      icon: Settings,
      color: "bg-blue-100 text-blue-800",
      items: [
        "User Management & Permissions",
        "Department & Team Setup",
        "Workflow Configuration",
        "System Settings & Security"
      ]
    },
    {
      title: "Service Catalog Management",
      icon: FileText,
      color: "bg-green-100 text-green-800",
      items: [
        "Creating Service Forms",
        "Form Builder Advanced Features",
        "Database Field Mapping",
        "Form Validation Rules"
      ]
    },
    {
      title: "Workflow & Approvals",
      icon: Workflow,
      color: "bg-purple-100 text-purple-800",
      items: [
        "Approval Workflow Design",
        "Multi-level Approval Setup",
        "Conditional Routing",
        "Escalation Rules"
      ]
    },
    {
      title: "User Management",
      icon: Users,
      color: "bg-orange-100 text-orange-800",
      items: [
        "Role-Based Access Control",
        "User Provisioning",
        "Active Directory Integration",
        "Permission Management"
      ]
    }
  ];

  if (testMode) {
    return (
      <AppLayout>
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold">Form Configuration Test</h1>
            <Button variant="outline" onClick={() => setTestMode(false)}>
              Back to Guide
            </Button>
          </div>
          <DynamicForm
            config={JSON.parse(generatedJson)}
            onSubmit={(data) => {
              alert('Form submitted successfully!\n\n' + JSON.stringify(data, null, 2));
            }}
          />
        </div>
      </AppLayout>
    );
  }

  return (
    <AppLayout>
      <div className="space-y-8">
        {/* Header */}
        <div className="text-center py-8 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">Admin Guide</h1>
          <p className="text-xl text-gray-600">Complete guide for system administrators</p>
        </div>

        <Tabs defaultValue="overview" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="guides">Detailed Guides</TabsTrigger>
            <TabsTrigger value="config-generator">Config Generator</TabsTrigger>
            <TabsTrigger value="troubleshooting">Troubleshooting</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Quick Start Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {guideCategories.map((category, index) => (
                <Card key={index} className="hover:shadow-md transition-shadow cursor-pointer">
                  <CardContent className="p-6">
                    <div className={`w-12 h-12 rounded-lg ${category.color} flex items-center justify-center mb-4`}>
                      <category.icon className="w-6 h-6" />
                    </div>
                    <h3 className="font-semibold mb-3">{category.title}</h3>
                    <ul className="space-y-1 text-sm text-gray-600">
                      {category.items.map((item, idx) => (
                        <li key={idx} className="flex items-start">
                          <CheckCircle className="w-3 h-3 text-green-500 mt-1 mr-2 flex-shrink-0" />
                          {item}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* System Overview */}
            <Card>
              <CardHeader>
                <CardTitle>System Architecture Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="text-center">
                    <div className="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                      <FileText className="w-8 h-8 text-blue-600" />
                    </div>
                    <h4 className="font-semibold mb-2">Service Catalog</h4>
                    <p className="text-sm text-gray-600">
                      Dynamic form builder with database mapping and validation rules
                    </p>
                  </div>
                  <div className="text-center">
                    <div className="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                      <Workflow className="w-8 h-8 text-green-600" />
                    </div>
                    <h4 className="font-semibold mb-2">Workflow Engine</h4>
                    <p className="text-sm text-gray-600">
                      Multi-level approval workflows with conditional routing
                    </p>
                  </div>
                  <div className="text-center">
                    <div className="bg-purple-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                      <Users className="w-8 h-8 text-purple-600" />
                    </div>
                    <h4 className="font-semibold mb-2">User Management</h4>
                    <p className="text-sm text-gray-600">
                      Role-based access control with department and team structure
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="guides" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="w-5 h-5" />
                    System Configuration
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-semibold mb-2">Initial Setup</h4>
                    <ol className="list-decimal list-inside space-y-1 text-sm">
                      <li>Configure database connections</li>
                      <li>Set up authentication providers</li>
                      <li>Define organizational structure</li>
                      <li>Create initial user roles</li>
                    </ol>
                  </div>
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-semibold mb-2">Security Settings</h4>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      <li>Password policies</li>
                      <li>Session management</li>
                      <li>API security configurations</li>
                      <li>Audit logging setup</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    Form Builder Guide
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-yellow-50 rounded-lg">
                    <h4 className="font-semibold mb-2">Field Types</h4>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <Badge variant="outline">Text Input</Badge>
                      <Badge variant="outline">Textarea</Badge>
                      <Badge variant="outline">Select Dropdown</Badge>
                      <Badge variant="outline">Radio Buttons</Badge>
                      <Badge variant="outline">Checkboxes</Badge>
                      <Badge variant="outline">Date Picker</Badge>
                      <Badge variant="outline">File Upload</Badge>
                      <Badge variant="outline">Toggle Switch</Badge>
                    </div>
                  </div>
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <h4 className="font-semibold mb-2">Advanced Features</h4>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      <li>Conditional field visibility</li>
                      <li>Dynamic row groups</li>
                      <li>Section-based organization</li>
                      <li>Database field mapping</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Database Field Mapping</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm text-gray-600 mb-4">
                    The system automatically maps form fields to database columns (cstm_col1 through cstm_col15).
                    Here's how different field types are handled:
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <h5 className="font-semibold mb-2">Individual Fields</h5>
                      <ul className="space-y-1">
                        <li>• Each field maps to one column</li>
                        <li>• Field label stored in lbl_colX</li>
                        <li>• Field value stored in cstm_colX</li>
                      </ul>
                    </div>
                    <div>
                      <h5 className="font-semibold mb-2">Row Groups</h5>
                      <ul className="space-y-1">
                        <li>• Can combine multiple columns</li>
                        <li>• Supports structured data input</li>
                        <li>• Configurable column mapping</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="config-generator" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Code className="w-5 h-5" />
                  Form Configuration Generator
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="form-title">Form Title</Label>
                      <Input
                        id="form-title"
                        value={configBuilder.title}
                        onChange={(e) => setConfigBuilder({...configBuilder, title: e.target.value})}
                        placeholder="Enter form title"
                      />
                    </div>
                    <div>
                      <Label htmlFor="form-description">Description</Label>
                      <Textarea
                        id="form-description"
                        value={configBuilder.description}
                        onChange={(e) => setConfigBuilder({...configBuilder, description: e.target.value})}
                        placeholder="Enter form description"
                      />
                    </div>
                    <div>
                      <Label htmlFor="form-category">Category</Label>
                      <Input
                        id="form-category"
                        value={configBuilder.category}
                        onChange={(e) => setConfigBuilder({...configBuilder, category: e.target.value})}
                        placeholder="Enter form category"
                      />
                    </div>
                    <Button onClick={generateSampleConfig} className="w-full">
                      Generate Sample Configuration
                    </Button>
                  </div>
                  
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <Label>Generated JSON Configuration</Label>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" onClick={copyToClipboard} disabled={!generatedJson}>
                          <Copy className="w-4 h-4 mr-1" />
                          Copy
                        </Button>
                        <Button variant="outline" size="sm" onClick={downloadJson} disabled={!generatedJson}>
                          <Download className="w-4 h-4 mr-1" />
                          Download
                        </Button>
                      </div>
                    </div>
                    <Textarea
                      value={generatedJson}
                      onChange={(e) => setGeneratedJson(e.target.value)}
                      placeholder="Generated configuration will appear here..."
                      className="h-64 font-mono text-sm"
                    />
                    <Button onClick={testConfig} disabled={!generatedJson} className="w-full">
                      <TestTube className="w-4 h-4 mr-2" />
                      Test Configuration
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="troubleshooting" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertCircle className="w-5 h-5 text-red-500" />
                    Common Issues
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                    <h4 className="font-semibold text-red-800 mb-2">Form Field Limit Exceeded</h4>
                    <p className="text-sm text-red-700 mb-2">
                      Forms are limited to 15 fields due to database constraints.
                    </p>
                    <p className="text-xs text-red-600">
                      Solution: Use sections or row groups to organize fields efficiently.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <h4 className="font-semibold text-yellow-800 mb-2">Workflow Not Triggering</h4>
                    <p className="text-sm text-yellow-700 mb-2">
                      Approval workflows may not start if configuration is incomplete.
                    </p>
                    <p className="text-xs text-yellow-600">
                      Solution: Check workflow group assignment and approval levels.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
                    <h4 className="font-semibold text-orange-800 mb-2">File Upload Failures</h4>
                    <p className="text-sm text-orange-700 mb-2">
                      Large files or unsupported formats may fail to upload.
                    </p>
                    <p className="text-xs text-orange-600">
                      Solution: Check file size limits and allowed extensions.
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Info className="w-5 h-5 text-blue-500" />
                    Best Practices
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 className="font-semibold text-blue-800 mb-2">Form Design</h4>
                    <ul className="text-sm text-blue-700 space-y-1">
                      <li>• Keep forms simple and focused</li>
                      <li>• Use clear, descriptive field labels</li>
                      <li>• Group related fields in sections</li>
                      <li>• Provide helpful placeholder text</li>
                    </ul>
                  </div>
                  
                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">Performance</h4>
                    <ul className="text-sm text-green-700 space-y-1">
                      <li>• Limit file upload sizes</li>
                      <li>• Use conditional fields wisely</li>
                      <li>• Regular database maintenance</li>
                      <li>• Monitor system resources</li>
                    </ul>
                  </div>
                  
                  <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                    <h4 className="font-semibold text-purple-800 mb-2">Security</h4>
                    <ul className="text-sm text-purple-700 space-y-1">
                      <li>• Regular permission audits</li>
                      <li>• Secure file storage</li>
                      <li>• Input validation rules</li>
                      <li>• Access logging</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </AppLayout>
  );
};

export default AdminGuide;
